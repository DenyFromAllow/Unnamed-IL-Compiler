#pragma once

class SIMPLE_FLOATVECTOR4_REFERENCE {
private:
	float &X, &Y, &Z, &W;
	FORCEINLINE SIMPLE_FLOATVECTOR4_REFERENCE(float &InX, float &InY, float &InZ, float &InW) :X(InX), Y(InY), Z(InZ), W(InW) { }
public:
	FORCEINLINE SIMPLE_FLOATVECTOR4_REFERENCE operator=(CONST SIMPLE_FLOATVECTOR4_REFERENCE REFERENCE In) { float Xtemp = In.X, Ytemp = In.Y, Ztemp = In.Z, Wtemp = In.W; X = Xtemp; Y = Ytemp; Z = Ztemp; W = Wtemp; return *this; }

	friend class SIMPLE_FLOATVECTOR4;
};

class SIMPLE_DOUBLEVECTOR4_REFERENCE {
private:
	double &X, &Y, &Z, &W;
	FORCEINLINE SIMPLE_DOUBLEVECTOR4_REFERENCE(double &InX, double &InY, double &InZ, double &InW) :X(InX), Y(InY), Z(InZ), W(InW) { }
public:
	FORCEINLINE SIMPLE_DOUBLEVECTOR4_REFERENCE operator=(CONST SIMPLE_DOUBLEVECTOR4_REFERENCE REFERENCE In) { double Xtemp = In.X, Ytemp = In.Y, Ztemp = In.Z, Wtemp = In.W; X = Xtemp; Y = Ytemp; Z = Ztemp; W = Wtemp; return *this; }

	friend class SIMPLE_DOUBLEVECTOR4;
};

class SIMPLE_FLOAT_HOMOGENEOUS_COORDINATES_3D {
public:
	float X, Y, Z, W;

	FORCEINLINE SIMPLE_FLOAT_HOMOGENEOUS_COORDINATES_3D() : X(0.f), Y(0.f), Z(0.f), W(1.f) { }
	FORCEINLINE SIMPLE_FLOAT_HOMOGENEOUS_COORDINATES_3D(CONST float REFERENCE InX, CONST float REFERENCE InY, CONST float REFERENCE InZ, CONST float REFERENCE InW) : X(InX), Y(InY), Z(InZ), W(InW) { }

	FORCEINLINE void NormalizeW(float Tolerance = DEFAULT_FLOAT_TOLERANCE) {
		if(SimpleMath_Abs(W) < Tolerance) { X = 0.f; Y = 0.f; Z = 0.f; W = 1.f; return; }
		X /= W; Y /= W; Z /= W; W = 1.f;
	}
	FORCEINLINE SIMPLE_FLOAT_HOMOGENEOUS_COORDINATES_3D GetNormalizedW(float Tolerance = DEFAULT_FLOAT_TOLERANCE) {
		if(SimpleMath_Abs(W) < Tolerance) { X = 0.f; Y = 0.f; Z = 0.f; W = 1.f; return SIMPLE_FLOAT_HOMOGENEOUS_COORDINATES_3D(); }
		return SIMPLE_FLOAT_HOMOGENEOUS_COORDINATES_3D(X / W, Y / W, Z / W, 1.f);
	}
	FORCEINLINE void Normalize(float Tolerance = DEFAULT_FLOAT_TOLERANCE) {
		if(SimpleMath_Abs(W) < Tolerance) { X = 0.f; Y = 0.f; Z = 0.f; W = 1.f; return; }
		X /= W; Y /= W; Z /= W; W = 1.f;
		float Length = X*X + Y*Y + Z*Z;
		if(Length <= Tolerance) { X = 0.f; Y = 0.f; Z = 0.f; return; }
		Length = sqrtf(Length);
		X /= Length; Y /= Length; Z /= Length;
	}
	FORCEINLINE SIMPLE_FLOAT_HOMOGENEOUS_COORDINATES_3D GetNormalized(float Tolerance = DEFAULT_FLOAT_TOLERANCE) {
		if(SimpleMath_Abs(W) < Tolerance) { X = 0.f; Y = 0.f; Z = 0.f; W = 1.f; return SIMPLE_FLOAT_HOMOGENEOUS_COORDINATES_3D(); }
		X /= W; Y /= W; Z /= W; W = 1.f;
		float Length = X*X + Y*Y + Z*Z;
		if(Length <= Tolerance) return SIMPLE_FLOAT_HOMOGENEOUS_COORDINATES_3D();
		Length = sqrtf(Length);
		return SIMPLE_FLOAT_HOMOGENEOUS_COORDINATES_3D(X / Length, Y / Length, Z / Length, 1.f);
	}

}; 

class SIMPLE_DOUBLE_HOMOGENEOUS_COORDINATES_3D {
public:
	double X, Y, Z, W;

	FORCEINLINE SIMPLE_DOUBLE_HOMOGENEOUS_COORDINATES_3D() : X(0.f), Y(0.f), Z(0.f), W(1.f) { }
	FORCEINLINE SIMPLE_DOUBLE_HOMOGENEOUS_COORDINATES_3D(CONST double REFERENCE InX, CONST double REFERENCE InY, CONST double REFERENCE InZ, CONST double REFERENCE InW) : X(InX), Y(InY), Z(InZ), W(InW) { }

	FORCEINLINE void NormalizeW(double Tolerance = DEFAULT_FLOAT_TOLERANCE) {
		if(SimpleMath_Abs(W) < Tolerance) { X = 0.0; Y = 0.0; Z = 0.0; W = 1.0; return; }
		X /= W; Y /= W; Z /= W; W = 1.0;
	}
	FORCEINLINE SIMPLE_DOUBLE_HOMOGENEOUS_COORDINATES_3D GetNormalizedW(double Tolerance = DEFAULT_FLOAT_TOLERANCE) {
		if(SimpleMath_Abs(W) < Tolerance) { X = 0.0; Y = 0.0; Z = 0.0; W = 1.0; return SIMPLE_DOUBLE_HOMOGENEOUS_COORDINATES_3D(); }
		return SIMPLE_DOUBLE_HOMOGENEOUS_COORDINATES_3D(X / W, Y / W, Z / W, 1.0);
	}
	FORCEINLINE void Normalize(double Tolerance = DEFAULT_FLOAT_TOLERANCE) {
		if(SimpleMath_Abs(W) < Tolerance) { X = 0.0; Y = 0.0; Z = 0.0; W = 1.0; return; }
		X /= W; Y /= W; Z /= W; W = 1.0;
		double Length = X*X + Y*Y + Z*Z;
		if(Length <= Tolerance) { X = 0.0; Y = 0.0; Z = 0.0; return; }
		Length = sqrt(Length);
		X /= Length; Y /= Length; Z /= Length;
	}
	FORCEINLINE SIMPLE_DOUBLE_HOMOGENEOUS_COORDINATES_3D GetNormalized(double Tolerance = DEFAULT_FLOAT_TOLERANCE) {
		if(SimpleMath_Abs(W) < Tolerance) { X = 0.0; Y = 0.0; Z = 0.0; W = 1.0; return SIMPLE_DOUBLE_HOMOGENEOUS_COORDINATES_3D(); }
		X /= W; Y /= W; Z /= W; W = 1.0;
		double Length = X*X + Y*Y + Z*Z;
		if(Length <= Tolerance) return SIMPLE_DOUBLE_HOMOGENEOUS_COORDINATES_3D();
		Length = sqrt(Length);
		return SIMPLE_DOUBLE_HOMOGENEOUS_COORDINATES_3D(X / Length, Y / Length, Z / Length, 1.0);
	}

};

class SIMPLE_FLOATVECTOR4 {
public:
	union {
		struct { float X, Y, Z, W; };
		struct { float R, G, B, A; };
		SIMPLE_FLOAT_HOMOGENEOUS_COORDINATES_3D Homog;
		float Data[4];
	};

	FORCEINLINE SIMPLE_FLOATVECTOR4() : X(0.f), Y(0.f), Z(0.f), W(1.f) { }
	FORCEINLINE SIMPLE_FLOATVECTOR4(CONST float REFERENCE InF) : X(InF), Y(InF), Z(InF), W(1.f) { }
	FORCEINLINE SIMPLE_FLOATVECTOR4(CONST float REFERENCE InX, CONST float REFERENCE InY, CONST float REFERENCE InZ) : X(InX), Y(InY), Z(InZ), W(1.f) { }
	FORCEINLINE SIMPLE_FLOATVECTOR4(CONST SIMPLE_FLOATVECTOR2 REFERENCE InXY, CONST float REFERENCE InZ) : X(InXY.X), Y(InXY.Y), Z(InZ), W(1.f) { }
	FORCEINLINE SIMPLE_FLOATVECTOR4(CONST float REFERENCE InX, CONST SIMPLE_FLOATVECTOR2 REFERENCE InYZ) : X(InX), Y(InYZ.X), Z(InYZ.Y), W(1.f) { }
	FORCEINLINE SIMPLE_FLOATVECTOR4(CONST SIMPLE_FLOATVECTOR3 REFERENCE In) : X(In.X), Y(In.Y), Z(In.Z), W(1.f) { }
	FORCEINLINE SIMPLE_FLOATVECTOR4(CONST SIMPLE_FLOATVECTOR3_REFERENCE REFERENCE In) : X(In.X), Y(In.Y), Z(In.Z), W(1.f) { }

	FORCEINLINE SIMPLE_FLOATVECTOR4(CONST float REFERENCE InX, CONST float REFERENCE InY, CONST float REFERENCE InZ, CONST float REFERENCE InW) : X(InX), Y(InY), Z(InZ), W(InW) { }
	FORCEINLINE SIMPLE_FLOATVECTOR4(CONST float REFERENCE InX, CONST SIMPLE_FLOATVECTOR3 REFERENCE InYZW) : X(InX), Y(InYZW.X), Z(InYZW.Y), W(InYZW.Z) { }
	FORCEINLINE SIMPLE_FLOATVECTOR4(CONST float REFERENCE InX, CONST SIMPLE_FLOATVECTOR3_REFERENCE REFERENCE InYZW) : X(InX), Y(InYZW.X), Z(InYZW.Y), W(InYZW.Z) { }
	FORCEINLINE SIMPLE_FLOATVECTOR4(CONST SIMPLE_FLOATVECTOR3 REFERENCE InXYZ, CONST float REFERENCE InW) : X(InXYZ.X), Y(InXYZ.Y), Z(InXYZ.Z), W(InW) { }
	FORCEINLINE SIMPLE_FLOATVECTOR4(CONST SIMPLE_FLOATVECTOR3_REFERENCE REFERENCE InXYZ, CONST float REFERENCE InW) : X(InXYZ.X), Y(InXYZ.Y), Z(InXYZ.Z), W(InW) { }
	FORCEINLINE SIMPLE_FLOATVECTOR4(CONST SIMPLE_FLOATVECTOR2 REFERENCE InXY, CONST float REFERENCE InZ, CONST float REFERENCE InW) : X(InXY.X), Y(InXY.Y), Z(InZ), W(InW) { }
	FORCEINLINE SIMPLE_FLOATVECTOR4(CONST float REFERENCE InX, CONST SIMPLE_FLOATVECTOR2 REFERENCE InYZ, CONST float REFERENCE InW) : X(InX), Y(InYZ.X), Z(InYZ.Y), W(InW) { }
	FORCEINLINE SIMPLE_FLOATVECTOR4(CONST float REFERENCE InX, CONST float REFERENCE InY, CONST SIMPLE_FLOATVECTOR2 REFERENCE InZW) : X(InX), Y(InY), Z(InZW.X), W(InZW.Y) { }
	FORCEINLINE SIMPLE_FLOATVECTOR4(CONST SIMPLE_FLOATVECTOR2 REFERENCE InXY, CONST SIMPLE_FLOATVECTOR2 REFERENCE InZW) : X(InXY.X), Y(InXY.Y), Z(InZW.X), W(InZW.Y) { }
	FORCEINLINE SIMPLE_FLOATVECTOR4(CONST SIMPLE_FLOATVECTOR4 & In) : X(In.X), Y(In.Y), Z(In.Z), W(In.W) { }
	FORCEINLINE SIMPLE_FLOATVECTOR4(CONST SIMPLE_FLOATVECTOR4_REFERENCE REFERENCE In) : X(In.X), Y(In.Y), Z(In.Z), W(In.W) { }

	FORCEINLINE EXPLICIT operator SIMPLE_FLOATVECTOR4_REFERENCE() { return SIMPLE_FLOATVECTOR4_REFERENCE(X, Y, Z, W); }

	FORCEINLINE SIMPLE_FLOATVECTOR4 operator=(CONST SIMPLE_FLOATVECTOR4 REFERENCE In) { X = In.X; Y = In.Y; Z = In.Z; W = In.W; return *this; }
	FORCEINLINE SIMPLE_FLOATVECTOR4 operator=(CONST SIMPLE_FLOATVECTOR4_REFERENCE REFERENCE In) { float Xtemp = In.X, Ytemp = In.Y, Ztemp = In.Z, Wtemp = In.W; X = Xtemp; Y = Ytemp; Z = Ztemp; W = Wtemp; return *this; }
	FORCEINLINE SIMPLE_FLOATVECTOR4 operator=(CONST SIMPLE_FLOATVECTOR3_REFERENCE REFERENCE In) { float Xtemp = In.X, Ytemp = In.Y, Ztemp = In.Z; X = Xtemp; Y = Ytemp; Z = Ztemp; W = 1.f; return *this; }
	//向量积
	//FORCEINLINE SIMPLE_FLOATVECTOR4 operator^(CONST SIMPLE_FLOATVECTOR4 REFERENCE V) { return SIMPLE_FLOATVECTOR4(Y * V.Z - Z * V.Y, Z * V.X - X * V.Z, X * V.Y - Y * V.X); }

	//标量积
	FORCEINLINE float operator%(CONST SIMPLE_FLOATVECTOR4 REFERENCE V) { return X*V.X + Y*V.Y + Z*V.Z + W*V.W; }

	FORCEINLINE SIMPLE_FLOATVECTOR4 operator()(CONST float REFERENCE InF) { X = InF; Y = InF; Z = InF; W = InF; return *this; }
	FORCEINLINE SIMPLE_FLOATVECTOR4 operator()(CONST float REFERENCE InX, CONST float REFERENCE InY, CONST float REFERENCE InZ) { X = InX; Y = InY; Z = InZ; W = 1.f; return *this; }
	FORCEINLINE SIMPLE_FLOATVECTOR4 operator()(CONST SIMPLE_FLOATVECTOR2 REFERENCE InXY, CONST float REFERENCE InZ) { X = InXY.X; Y = InXY.Y; Z = InZ; W = 1.f; return *this; }
	FORCEINLINE SIMPLE_FLOATVECTOR4 operator()(CONST float REFERENCE InX, CONST SIMPLE_FLOATVECTOR2 REFERENCE InYZ) { X = InX; Y = InYZ.X; Z = InYZ.Y; W = 1.f; return *this; }
	FORCEINLINE SIMPLE_FLOATVECTOR4 operator()(CONST SIMPLE_FLOATVECTOR3 REFERENCE In) { X = In.X; Y = In.Y; Z = In.Z; W = 1.f; return *this; }
	FORCEINLINE SIMPLE_FLOATVECTOR4 operator()(CONST SIMPLE_FLOATVECTOR3_REFERENCE REFERENCE In) { float Xtemp = In.X, Ytemp = In.Y, Ztemp = In.Z; X = Xtemp; Y = Ytemp; Z = Ztemp; W = 1.f; return *this; }

	FORCEINLINE SIMPLE_FLOATVECTOR4 operator()(CONST float REFERENCE InX, CONST float REFERENCE InY, CONST float REFERENCE InZ, CONST float REFERENCE InW) { X = InX; Y = InY; Z = InZ; W = InW; return *this; }
	FORCEINLINE SIMPLE_FLOATVECTOR4 operator()(CONST float REFERENCE InX, CONST SIMPLE_FLOATVECTOR3 REFERENCE InYZW) { X = InX; Y = InYZW.X; Z = InYZW.Y; W = InYZW.Z; return *this; }
	FORCEINLINE SIMPLE_FLOATVECTOR4 operator()(CONST SIMPLE_FLOATVECTOR3 REFERENCE InXYZ, CONST float REFERENCE InW) { X = InXYZ.X; Y = InXYZ.Y; Z = InXYZ.Z; W = InW; return *this; }
	FORCEINLINE SIMPLE_FLOATVECTOR4 operator()(CONST SIMPLE_FLOATVECTOR2 REFERENCE InXY, CONST float REFERENCE InZ, CONST float REFERENCE InW) { X = InXY.X; Y = InXY.Y; Z = InZ; W = InW; return *this; }
	FORCEINLINE SIMPLE_FLOATVECTOR4 operator()(CONST float REFERENCE InX, CONST SIMPLE_FLOATVECTOR2 REFERENCE InYZ, CONST float REFERENCE InW) { X = InX; Y = InYZ.X; Z = InYZ.Y; W = InW; return *this; }
	FORCEINLINE SIMPLE_FLOATVECTOR4 operator()(CONST float REFERENCE InX, CONST float REFERENCE InY, CONST SIMPLE_FLOATVECTOR2 REFERENCE InZW) { X = InX; Y = InY; Z = InZW.X; W = InZW.Y; return *this; }
	FORCEINLINE SIMPLE_FLOATVECTOR4 operator()(CONST SIMPLE_FLOATVECTOR2 REFERENCE InXY, CONST SIMPLE_FLOATVECTOR2 REFERENCE InZW) { X = InXY.X; Y = InXY.Y; Z = InZW.X; W = InZW.Y; return *this; }
	FORCEINLINE SIMPLE_FLOATVECTOR4 operator()(CONST SIMPLE_FLOATVECTOR4 & In) { X = In.X; Y = In.Y; Z = In.Z; W = In.W; return *this; }
	FORCEINLINE SIMPLE_FLOATVECTOR4 operator()(CONST SIMPLE_FLOATVECTOR4_REFERENCE REFERENCE In) { float Xtemp = In.X, Ytemp = In.Y, Ztemp = In.Z, Wtemp = In.W; X = Xtemp; Y = Ytemp; Z = Ztemp; W = Wtemp; return *this; }

	FORCEINLINE SIMPLE_FLOATVECTOR4 operator+(CONST SIMPLE_FLOATVECTOR4 REFERENCE V) CONST { return SIMPLE_FLOATVECTOR4(X + V.X, Y + V.Y, Z + V.Z, W + V.W); }
	FORCEINLINE SIMPLE_FLOATVECTOR4 operator-(CONST SIMPLE_FLOATVECTOR4 REFERENCE V) CONST { return SIMPLE_FLOATVECTOR4(X - V.X, Y - V.Y, Z - V.Z, W - V.W); }
	FORCEINLINE SIMPLE_FLOATVECTOR4 operator*(CONST SIMPLE_FLOATVECTOR4 REFERENCE V) CONST { return SIMPLE_FLOATVECTOR4(X * V.X, Y * V.Y, Z * V.Z, W * V.W); }
	FORCEINLINE SIMPLE_FLOATVECTOR4 operator/(CONST SIMPLE_FLOATVECTOR4 REFERENCE V) CONST { return SIMPLE_FLOATVECTOR4(X / V.X, Y / V.Y, Z / V.Z, W / V.W); }
	FORCEINLINE SIMPLE_FLOATVECTOR4 operator+(CONST float REFERENCE Bias) CONST { return SIMPLE_FLOATVECTOR4(X + Bias, Y + Bias, Z + Bias, W + Bias); }
	FORCEINLINE SIMPLE_FLOATVECTOR4 operator-(CONST float REFERENCE Bias) CONST { return SIMPLE_FLOATVECTOR4(X - Bias, Y - Bias, Z - Bias, W - Bias); }
	FORCEINLINE SIMPLE_FLOATVECTOR4 operator*(CONST float REFERENCE Scale) CONST { return SIMPLE_FLOATVECTOR4(X * Scale, Y * Scale, Z * Scale, W * Scale); }
	FORCEINLINE SIMPLE_FLOATVECTOR4 operator/(CONST float REFERENCE Scale) CONST { return SIMPLE_FLOATVECTOR4(X / Scale, Y / Scale, Z / Scale, W / Scale); }
	FORCEINLINE SIMPLE_FLOATVECTOR4 operator-() CONST { return SIMPLE_FLOATVECTOR4(-X, -Y, -Z, -W); }

	FORCEINLINE SIMPLE_FLOATVECTOR4 operator+=(CONST SIMPLE_FLOATVECTOR4 REFERENCE V) { return SIMPLE_FLOATVECTOR4(X += V.X, Y += V.Y, Z += V.Z, W += V.W); }
	FORCEINLINE SIMPLE_FLOATVECTOR4 operator-=(CONST SIMPLE_FLOATVECTOR4 REFERENCE V) { return SIMPLE_FLOATVECTOR4(X -= V.X, Y -= V.Y, Z -= V.Z, W -= V.W); }
	FORCEINLINE SIMPLE_FLOATVECTOR4 operator*=(CONST SIMPLE_FLOATVECTOR4 REFERENCE V) { return SIMPLE_FLOATVECTOR4(X *= V.X, Y *= V.Y, Z *= V.Z, W *= V.W); }
	FORCEINLINE SIMPLE_FLOATVECTOR4 operator/=(CONST SIMPLE_FLOATVECTOR4 REFERENCE V) { return SIMPLE_FLOATVECTOR4(X /= V.X, Y /= V.Y, Z /= V.Z, W /= V.W); }
	FORCEINLINE SIMPLE_FLOATVECTOR4 operator+=(CONST float REFERENCE Bias) { return SIMPLE_FLOATVECTOR4(X += Bias, Y += Bias, Z += Bias, W += Bias); }
	FORCEINLINE SIMPLE_FLOATVECTOR4 operator-=(CONST float REFERENCE Bias) { return SIMPLE_FLOATVECTOR4(X -= Bias, Y -= Bias, Z -= Bias, W -= Bias); }
	FORCEINLINE SIMPLE_FLOATVECTOR4 operator*=(CONST float REFERENCE Scale) { return SIMPLE_FLOATVECTOR4(X *= Scale, Y *= Scale, Z *= Scale, W *= Scale); }
	FORCEINLINE SIMPLE_FLOATVECTOR4 operator/=(CONST float REFERENCE Scale) { return SIMPLE_FLOATVECTOR4(X /= Scale, Y /= Scale, Z /= Scale, W /= Scale); }

	FORCEINLINE float& operator[](CONST unsigned char REFERENCE Index) { return Data[Index]; }

	FORCEINLINE float& GetMin() { return SimpleMath_Min4(X, Y, Z, W); }
	FORCEINLINE float& GetMax() { return SimpleMath_Max4(X, Y, Z, W); }
	FORCEINLINE float GetAbsMin() CONST { return SimpleMath_AbsMin4(X, Y, Z, W); }
	FORCEINLINE float GetAbsMax() CONST { return SimpleMath_AbsMax4(X, Y, Z, W); }

	FORCEINLINE float Length() CONST { return sqrtf(X*X + Y*Y + Z*Z + W*W); }
	FORCEINLINE float LengthSquared() CONST { return X*X + Y*Y + Z*Z + W*W; }

	FORCEINLINE void Normalize(float Tolerance = DEFAULT_FLOAT_TOLERANCE) {
		float Length = X*X + Y*Y + Z*Z + W*W;
		if(Length <= Tolerance) { X = 0.f; Y = 0.f; Z = 0.f; W = 0.f; return; }
		Length = sqrtf(Length);
		X /= Length; Y /= Length; Z /= Length; W /= Length;
	}
	FORCEINLINE SIMPLE_FLOATVECTOR4 GetNormalized(float Tolerance = DEFAULT_FLOAT_TOLERANCE) {
		float Length = X*X + Y*Y + Z*Z + W*W;
		if(Length <= Tolerance) return SIMPLE_FLOATVECTOR4();
		Length = sqrtf(Length);
		return SIMPLE_FLOATVECTOR4(X / Length, Y / Length, Z / Length, W / Length);
	}

	#include "FloatVector4.enum"
};

FORCEINLINE SIMPLE_FLOATVECTOR4 operator+(SIMPLE_FLOAT_HOMOGENEOUS_COORDINATES_3D H, SIMPLE_FLOATVECTOR4 V) { H.NormalizeW(); V.Homog.NormalizeW(); return SIMPLE_FLOATVECTOR4(H.X + V.X, H.Y + V.Y, H.Z + V.Z, 1.f); }
FORCEINLINE SIMPLE_FLOATVECTOR4 operator-(SIMPLE_FLOAT_HOMOGENEOUS_COORDINATES_3D H, SIMPLE_FLOATVECTOR4 V) { H.NormalizeW(); V.Homog.NormalizeW(); return SIMPLE_FLOATVECTOR4(H.X - V.X, H.Y - V.Y, H.Z - V.Z, 1.f); }
FORCEINLINE SIMPLE_FLOATVECTOR4 operator*(SIMPLE_FLOAT_HOMOGENEOUS_COORDINATES_3D H, SIMPLE_FLOATVECTOR4 V) { H.NormalizeW(); V.Homog.NormalizeW(); return SIMPLE_FLOATVECTOR4(H.X * V.X, H.Y * V.Y, H.Z * V.Z, 1.f); }
FORCEINLINE SIMPLE_FLOATVECTOR4 operator/(SIMPLE_FLOAT_HOMOGENEOUS_COORDINATES_3D H, SIMPLE_FLOATVECTOR4 V) { H.NormalizeW(); V.Homog.NormalizeW(); return SIMPLE_FLOATVECTOR4(H.X / V.X, H.Y / V.Y, H.Z / V.Z, 1.f); }
FORCEINLINE SIMPLE_FLOATVECTOR4 operator^(SIMPLE_FLOAT_HOMOGENEOUS_COORDINATES_3D H, SIMPLE_FLOATVECTOR4 V){ H.NormalizeW(); V.Homog.NormalizeW(); return SIMPLE_FLOATVECTOR4(H.Y * V.Z - H.Z * V.Y, H.Z * V.X - H.X * V.Z, H.X * V.Y - H.Y * V.X); }
FORCEINLINE float operator%(SIMPLE_FLOAT_HOMOGENEOUS_COORDINATES_3D H, SIMPLE_FLOATVECTOR4 V) { H.NormalizeW(); V.Homog.NormalizeW(); return H.X*V.X + H.Y*V.Y + H.Z*V.Z; }

FORCEINLINE SIMPLE_FLOATVECTOR4 operator+=(SIMPLE_FLOAT_HOMOGENEOUS_COORDINATES_3D & H, SIMPLE_FLOATVECTOR4 V) { H.NormalizeW(); V.Homog.NormalizeW(); return SIMPLE_FLOATVECTOR4(H.X += V.X, H.Y += V.Y, H.Z += V.Z, 1.f); }
FORCEINLINE SIMPLE_FLOATVECTOR4 operator-=(SIMPLE_FLOAT_HOMOGENEOUS_COORDINATES_3D & H, SIMPLE_FLOATVECTOR4 V) { H.NormalizeW(); V.Homog.NormalizeW(); return SIMPLE_FLOATVECTOR4(H.X -= V.X, H.Y -= V.Y, H.Z -= V.Z, 1.f); }
FORCEINLINE SIMPLE_FLOATVECTOR4 operator*=(SIMPLE_FLOAT_HOMOGENEOUS_COORDINATES_3D & H, SIMPLE_FLOATVECTOR4 V) { H.NormalizeW(); V.Homog.NormalizeW(); return SIMPLE_FLOATVECTOR4(H.X *= V.X, H.Y *= V.Y, H.Z *= V.Z, 1.f); }
FORCEINLINE SIMPLE_FLOATVECTOR4 operator/=(SIMPLE_FLOAT_HOMOGENEOUS_COORDINATES_3D & H, SIMPLE_FLOATVECTOR4 V) { H.NormalizeW(); V.Homog.NormalizeW(); return SIMPLE_FLOATVECTOR4(H.X /= V.X, H.Y /= V.Y, H.Z /= V.Z, 1.f); }

FORCEINLINE SIMPLE_FLOATVECTOR4 operator+(SIMPLE_FLOAT_HOMOGENEOUS_COORDINATES_3D H, SIMPLE_FLOAT_HOMOGENEOUS_COORDINATES_3D H2) { H.NormalizeW(); H2.NormalizeW(); return SIMPLE_FLOATVECTOR4(H.X + H2.X, H.Y + H2.Y, H.Z + H2.Z, 1.f); }
FORCEINLINE SIMPLE_FLOATVECTOR4 operator-(SIMPLE_FLOAT_HOMOGENEOUS_COORDINATES_3D H, SIMPLE_FLOAT_HOMOGENEOUS_COORDINATES_3D H2) { H.NormalizeW(); H2.NormalizeW(); return SIMPLE_FLOATVECTOR4(H.X - H2.X, H.Y - H2.Y, H.Z - H2.Z, 1.f); }
FORCEINLINE SIMPLE_FLOATVECTOR4 operator*(SIMPLE_FLOAT_HOMOGENEOUS_COORDINATES_3D H, SIMPLE_FLOAT_HOMOGENEOUS_COORDINATES_3D H2) { H.NormalizeW(); H2.NormalizeW(); return SIMPLE_FLOATVECTOR4(H.X * H2.X, H.Y * H2.Y, H.Z * H2.Z, 1.f); }
FORCEINLINE SIMPLE_FLOATVECTOR4 operator/(SIMPLE_FLOAT_HOMOGENEOUS_COORDINATES_3D H, SIMPLE_FLOAT_HOMOGENEOUS_COORDINATES_3D H2) { H.NormalizeW(); H2.NormalizeW(); return SIMPLE_FLOATVECTOR4(H.X / H2.X, H.Y / H2.Y, H.Z / H2.Z, 1.f); }
FORCEINLINE SIMPLE_FLOATVECTOR4 operator^(SIMPLE_FLOAT_HOMOGENEOUS_COORDINATES_3D H, SIMPLE_FLOAT_HOMOGENEOUS_COORDINATES_3D H2) { H.NormalizeW(); H2.NormalizeW(); return SIMPLE_FLOATVECTOR4(H.Y * H2.Z - H.Z * H2.Y, H.Z * H2.X - H.X * H2.Z, H.X * H2.Y - H.Y * H2.X); }
FORCEINLINE float operator%(SIMPLE_FLOAT_HOMOGENEOUS_COORDINATES_3D H, SIMPLE_FLOAT_HOMOGENEOUS_COORDINATES_3D H2) { H.NormalizeW(); H2.NormalizeW(); return H.X*H2.X + H.Y*H2.Y + H.Z*H2.Z; }

FORCEINLINE SIMPLE_FLOATVECTOR4 operator+=(SIMPLE_FLOAT_HOMOGENEOUS_COORDINATES_3D & H, SIMPLE_FLOAT_HOMOGENEOUS_COORDINATES_3D H2) { H.NormalizeW(); H2.NormalizeW(); return SIMPLE_FLOATVECTOR4(H.X += H2.X, H.Y += H2.Y, H.Z += H2.Z, 1.f); }
FORCEINLINE SIMPLE_FLOATVECTOR4 operator-=(SIMPLE_FLOAT_HOMOGENEOUS_COORDINATES_3D & H, SIMPLE_FLOAT_HOMOGENEOUS_COORDINATES_3D H2) { H.NormalizeW(); H2.NormalizeW(); return SIMPLE_FLOATVECTOR4(H.X -= H2.X, H.Y -= H2.Y, H.Z -= H2.Z, 1.f); }
FORCEINLINE SIMPLE_FLOATVECTOR4 operator*=(SIMPLE_FLOAT_HOMOGENEOUS_COORDINATES_3D & H, SIMPLE_FLOAT_HOMOGENEOUS_COORDINATES_3D H2) { H.NormalizeW(); H2.NormalizeW(); return SIMPLE_FLOATVECTOR4(H.X *= H2.X, H.Y *= H2.Y, H.Z *= H2.Z, 1.f); }
FORCEINLINE SIMPLE_FLOATVECTOR4 operator/=(SIMPLE_FLOAT_HOMOGENEOUS_COORDINATES_3D & H, SIMPLE_FLOAT_HOMOGENEOUS_COORDINATES_3D H2) { H.NormalizeW(); H2.NormalizeW(); return SIMPLE_FLOATVECTOR4(H.X /= H2.X, H.Y /= H2.Y, H.Z /= H2.Z, 1.f); }

FORCEINLINE SIMPLE_FLOATVECTOR4 operator+(SIMPLE_FLOATVECTOR4 V, SIMPLE_FLOAT_HOMOGENEOUS_COORDINATES_3D H) { V.Homog.NormalizeW(); H.NormalizeW(); return SIMPLE_FLOATVECTOR4(V.X + H.X, V.Y + H.Y, V.Z + H.Z, 1.f); }
FORCEINLINE SIMPLE_FLOATVECTOR4 operator-(SIMPLE_FLOATVECTOR4 V, SIMPLE_FLOAT_HOMOGENEOUS_COORDINATES_3D H) { V.Homog.NormalizeW(); H.NormalizeW(); return SIMPLE_FLOATVECTOR4(V.X - H.X, V.Y - H.Y, V.Z - H.Z, 1.f); }
FORCEINLINE SIMPLE_FLOATVECTOR4 operator*(SIMPLE_FLOATVECTOR4 V, SIMPLE_FLOAT_HOMOGENEOUS_COORDINATES_3D H) { V.Homog.NormalizeW(); H.NormalizeW(); return SIMPLE_FLOATVECTOR4(V.X * H.X, V.Y * H.Y, V.Z * H.Z, 1.f); }
FORCEINLINE SIMPLE_FLOATVECTOR4 operator/(SIMPLE_FLOATVECTOR4 V, SIMPLE_FLOAT_HOMOGENEOUS_COORDINATES_3D H) { V.Homog.NormalizeW(); H.NormalizeW(); return SIMPLE_FLOATVECTOR4(V.X / H.X, V.Y / H.Y, V.Z / H.Z, 1.f); }
FORCEINLINE SIMPLE_FLOATVECTOR4 operator^(SIMPLE_FLOATVECTOR4 V, SIMPLE_FLOAT_HOMOGENEOUS_COORDINATES_3D H) { V.Homog.NormalizeW(); H.NormalizeW(); return SIMPLE_FLOATVECTOR4(V.Y * H.Z - V.Z * H.Y, V.Z * H.X - V.X * H.Z, V.X * H.Y - V.Y * H.X); }
FORCEINLINE float operator%(SIMPLE_FLOATVECTOR4 V, SIMPLE_FLOAT_HOMOGENEOUS_COORDINATES_3D H) { V.Homog.NormalizeW(); H.NormalizeW(); return V.X*H.X + V.Y*H.Y + V.Z*H.Z; }

FORCEINLINE SIMPLE_FLOATVECTOR4 operator+=(SIMPLE_FLOATVECTOR4 & V, SIMPLE_FLOAT_HOMOGENEOUS_COORDINATES_3D H) { V.Homog.NormalizeW(); H.NormalizeW(); return SIMPLE_FLOATVECTOR4(V.X += H.X, V.Y += H.Y, V.Z += H.Z, 1.f); }
FORCEINLINE SIMPLE_FLOATVECTOR4 operator-=(SIMPLE_FLOATVECTOR4 & V, SIMPLE_FLOAT_HOMOGENEOUS_COORDINATES_3D H) { V.Homog.NormalizeW(); H.NormalizeW(); return SIMPLE_FLOATVECTOR4(V.X -= H.X, V.Y -= H.Y, V.Z -= H.Z, 1.f); }
FORCEINLINE SIMPLE_FLOATVECTOR4 operator*=(SIMPLE_FLOATVECTOR4 & V, SIMPLE_FLOAT_HOMOGENEOUS_COORDINATES_3D H) { V.Homog.NormalizeW(); H.NormalizeW(); return SIMPLE_FLOATVECTOR4(V.X *= H.X, V.Y *= H.Y, V.Z *= H.Z, 1.f); }
FORCEINLINE SIMPLE_FLOATVECTOR4 operator/=(SIMPLE_FLOATVECTOR4 & V, SIMPLE_FLOAT_HOMOGENEOUS_COORDINATES_3D H) { V.Homog.NormalizeW(); H.NormalizeW(); return SIMPLE_FLOATVECTOR4(V.X /= H.X, V.Y /= H.Y, V.Z /= H.Z, 1.f); }

class SIMPLE_DOUBLEVECTOR4 {
public:
	union {
		struct { double X, Y, Z, W; };
		struct { double R, G, B, A; };
		SIMPLE_DOUBLE_HOMOGENEOUS_COORDINATES_3D Homog;
		double Data[4];
	};

	FORCEINLINE SIMPLE_DOUBLEVECTOR4() : X(0.0), Y(0.0), Z(0.0), W(0.0) { }
	FORCEINLINE SIMPLE_DOUBLEVECTOR4(CONST double REFERENCE InF) : X(InF), Y(InF), Z(InF), W(1.0) { }
	FORCEINLINE SIMPLE_DOUBLEVECTOR4(CONST double REFERENCE InX, CONST double REFERENCE InY, CONST double REFERENCE InZ) : X(InX), Y(InY), Z(InZ), W(1.0) { }
	FORCEINLINE SIMPLE_DOUBLEVECTOR4(CONST SIMPLE_DOUBLEVECTOR2 REFERENCE InXY, CONST double REFERENCE InZ) : X(InXY.X), Y(InXY.Y), Z(InZ), W(1.0) { }
	FORCEINLINE SIMPLE_DOUBLEVECTOR4(CONST double REFERENCE InX, CONST SIMPLE_DOUBLEVECTOR2 REFERENCE InYZ) : X(InX), Y(InYZ.X), Z(InYZ.Y), W(1.0) { }
	FORCEINLINE SIMPLE_DOUBLEVECTOR4(CONST SIMPLE_DOUBLEVECTOR3 REFERENCE In) : X(In.X), Y(In.Y), Z(In.Z), W(1.0) { }
	FORCEINLINE SIMPLE_DOUBLEVECTOR4(CONST SIMPLE_DOUBLEVECTOR3_REFERENCE REFERENCE In) : X(In.X), Y(In.Y), Z(In.Z), W(1.0) { }

	FORCEINLINE SIMPLE_DOUBLEVECTOR4(CONST double REFERENCE InX, CONST double REFERENCE InY, CONST double REFERENCE InZ, CONST double REFERENCE InW) : X(InX), Y(InY), Z(InZ), W(InW) { }
	FORCEINLINE SIMPLE_DOUBLEVECTOR4(CONST double REFERENCE InX, CONST SIMPLE_DOUBLEVECTOR3 REFERENCE InYZW) : X(InX), Y(InYZW.X), Z(InYZW.Y), W(InYZW.Z) { }
	FORCEINLINE SIMPLE_DOUBLEVECTOR4(CONST SIMPLE_DOUBLEVECTOR3 REFERENCE InXYZ, CONST double REFERENCE InW) : X(InXYZ.X), Y(InXYZ.Y), Z(InXYZ.Z), W(InW) { }
	FORCEINLINE SIMPLE_DOUBLEVECTOR4(CONST SIMPLE_DOUBLEVECTOR2 REFERENCE InXY, CONST double REFERENCE InZ, CONST double REFERENCE InW) : X(InXY.X), Y(InXY.Y), Z(InZ), W(InW) { }
	FORCEINLINE SIMPLE_DOUBLEVECTOR4(CONST double REFERENCE InX, CONST SIMPLE_DOUBLEVECTOR2 REFERENCE InYZ, CONST double REFERENCE InW) : X(InX), Y(InYZ.X), Z(InYZ.Y), W(InW) { }
	FORCEINLINE SIMPLE_DOUBLEVECTOR4(CONST double REFERENCE InX, CONST double REFERENCE InY, CONST SIMPLE_DOUBLEVECTOR2 REFERENCE InZW) : X(InX), Y(InY), Z(InZW.X), W(InZW.Y) { }
	FORCEINLINE SIMPLE_DOUBLEVECTOR4(CONST SIMPLE_DOUBLEVECTOR2 REFERENCE InXY, CONST SIMPLE_DOUBLEVECTOR2 REFERENCE InZW) : X(InXY.X), Y(InXY.Y), Z(InZW.X), W(InZW.Y) { }
	FORCEINLINE SIMPLE_DOUBLEVECTOR4(CONST SIMPLE_DOUBLEVECTOR4 & In) : X(In.X), Y(In.Y), Z(In.Z), W(In.W) { }
	FORCEINLINE SIMPLE_DOUBLEVECTOR4(CONST SIMPLE_DOUBLEVECTOR4_REFERENCE REFERENCE In) : X(In.X), Y(In.Y), Z(In.Z), W(In.W) { }

	FORCEINLINE EXPLICIT SIMPLE_DOUBLEVECTOR4(CONST SIMPLE_FLOATVECTOR4 REFERENCE In) : X((double) In.X), Y((double) In.Y), Z((double) In.Z), W((double) In.W) { }
	FORCEINLINE EXPLICIT operator SIMPLE_FLOATVECTOR4() { return SIMPLE_FLOATVECTOR4((float) X, (float) Y, (float) Z, (float) W); }
	FORCEINLINE EXPLICIT operator SIMPLE_DOUBLEVECTOR4_REFERENCE() { return SIMPLE_DOUBLEVECTOR4_REFERENCE(X, Y, Z, W); }

	FORCEINLINE SIMPLE_DOUBLEVECTOR4 operator=(CONST SIMPLE_FLOATVECTOR4 REFERENCE In) { X = (double) In.X; Y = (double) In.Y; Z = (double) In.Z; W = (double) In.W; return *this; }
	FORCEINLINE SIMPLE_DOUBLEVECTOR4 operator=(CONST SIMPLE_DOUBLEVECTOR4 REFERENCE In) { X = In.X; Y = In.Y; Z = In.Z; W = In.W; return *this; }
	FORCEINLINE SIMPLE_DOUBLEVECTOR4 operator=(CONST SIMPLE_DOUBLEVECTOR4_REFERENCE REFERENCE In) { double Xtemp = In.X, Ytemp = In.Y, Ztemp = In.Z, Wtemp = In.W; X = Xtemp; Y = Ytemp; Z = Ztemp; W = Wtemp; return *this; }
	FORCEINLINE SIMPLE_DOUBLEVECTOR4 operator=(CONST SIMPLE_DOUBLEVECTOR3_REFERENCE REFERENCE In) { double  Xtemp = In.X, Ytemp = In.Y, Ztemp = In.Z; X = Xtemp; Y = Ytemp; Z = Ztemp; W = 1.0; return *this; }

	//向量积
	//FORCEINLINE SIMPLE_DOUBLEVECTOR4 operator^(CONST SIMPLE_DOUBLEVECTOR4 REFERENCE V) { return SIMPLE_DOUBLEVECTOR4(Y * V.Z - Z * V.Y, Z * V.X - X * V.Z, X * V.Y - Y * V.X); }

	//标量积
	FORCEINLINE double operator%(CONST SIMPLE_DOUBLEVECTOR4 REFERENCE V) { return X*V.X + Y*V.Y + Z*V.Z + W*V.W; }

	FORCEINLINE SIMPLE_DOUBLEVECTOR4 operator()(CONST double REFERENCE InF) { X = InF; Y = InF; Z = InF; W = InF; return *this; }
	FORCEINLINE SIMPLE_DOUBLEVECTOR4 operator()(CONST double REFERENCE InX, CONST double REFERENCE InY, CONST double REFERENCE InZ) { X = InX; Y = InY; Z = InZ; W = 1.0; return *this; }
	FORCEINLINE SIMPLE_DOUBLEVECTOR4 operator()(CONST SIMPLE_DOUBLEVECTOR2 REFERENCE InXY, CONST double REFERENCE InZ) { X = InXY.X; Y = InXY.Y; Z = InZ; W = 1.0; return *this; }
	FORCEINLINE SIMPLE_DOUBLEVECTOR4 operator()(CONST double REFERENCE InX, CONST SIMPLE_DOUBLEVECTOR2 REFERENCE InYZ) { X = InX; Y = InYZ.X; Z = InYZ.Y; W = 1.0; return *this; }
	FORCEINLINE SIMPLE_DOUBLEVECTOR4 operator()(CONST SIMPLE_DOUBLEVECTOR3 REFERENCE In) { X = In.X; Y = In.Y; Z = In.Z; W = 1.0; return *this; }
	FORCEINLINE SIMPLE_DOUBLEVECTOR4 operator()(CONST SIMPLE_DOUBLEVECTOR3_REFERENCE REFERENCE In) { double  Xtemp = In.X, Ytemp = In.Y, Ztemp = In.Z; X = Xtemp; Y = Ytemp; Z = Ztemp; W = 1.0; return *this; }

	FORCEINLINE SIMPLE_DOUBLEVECTOR4 operator()(CONST double REFERENCE InX, CONST double REFERENCE InY, CONST double REFERENCE InZ, CONST double REFERENCE InW) { X = InX; Y = InY; Z = InZ; W = InW; return *this; }
	FORCEINLINE SIMPLE_DOUBLEVECTOR4 operator()(CONST double REFERENCE InX, CONST SIMPLE_DOUBLEVECTOR3 REFERENCE InYZW) { X = InX; Y = InYZW.X; Z = InYZW.Y; W = InYZW.Z; return *this; }
	FORCEINLINE SIMPLE_DOUBLEVECTOR4 operator()(CONST SIMPLE_DOUBLEVECTOR3 REFERENCE InXYZ, CONST double REFERENCE InW) { X = InXYZ.X; Y = InXYZ.Y; Z = InXYZ.Z; W = InW; return *this; }
	FORCEINLINE SIMPLE_DOUBLEVECTOR4 operator()(CONST SIMPLE_DOUBLEVECTOR2 REFERENCE InXY, CONST double REFERENCE InZ, CONST double REFERENCE InW) { X = InXY.X; Y = InXY.Y; Z = InZ; W = InW; return *this; }
	FORCEINLINE SIMPLE_DOUBLEVECTOR4 operator()(CONST double REFERENCE InX, CONST SIMPLE_DOUBLEVECTOR2 REFERENCE InYZ, CONST double REFERENCE InW) { X = InX; Y = InYZ.X; Z = InYZ.Y; W = InW; return *this; }
	FORCEINLINE SIMPLE_DOUBLEVECTOR4 operator()(CONST double REFERENCE InX, CONST double REFERENCE InY, CONST SIMPLE_DOUBLEVECTOR2 REFERENCE InZW) { X = InX; Y = InY; Z = InZW.X; W = InZW.Y; return *this; }
	FORCEINLINE SIMPLE_DOUBLEVECTOR4 operator()(CONST SIMPLE_DOUBLEVECTOR2 REFERENCE InXY, CONST SIMPLE_DOUBLEVECTOR2 REFERENCE InZW) { X = InXY.X; Y = InXY.Y; Z = InZW.X; W = InZW.Y; return *this; }
	FORCEINLINE SIMPLE_DOUBLEVECTOR4 operator()(CONST SIMPLE_DOUBLEVECTOR4 & In) { X = In.X; Y = In.Y; Z = In.Z; W = In.W; return *this; }
	FORCEINLINE SIMPLE_DOUBLEVECTOR4 operator()(CONST SIMPLE_DOUBLEVECTOR4_REFERENCE REFERENCE In) { double  Xtemp = In.X, Ytemp = In.Y, Ztemp = In.Z, Wtemp = In.W; X = Xtemp; Y = Ytemp; Z = Ztemp; W = Wtemp; return *this; }

	FORCEINLINE SIMPLE_DOUBLEVECTOR4 operator+(CONST SIMPLE_DOUBLEVECTOR4 REFERENCE V) CONST { return SIMPLE_DOUBLEVECTOR4(X + V.X, Y + V.Y, Z + V.Z, W + V.W); }
	FORCEINLINE SIMPLE_DOUBLEVECTOR4 operator-(CONST SIMPLE_DOUBLEVECTOR4 REFERENCE V) CONST { return SIMPLE_DOUBLEVECTOR4(X - V.X, Y - V.Y, Z - V.Z, W - V.W); }
	FORCEINLINE SIMPLE_DOUBLEVECTOR4 operator*(CONST SIMPLE_DOUBLEVECTOR4 REFERENCE V) CONST { return SIMPLE_DOUBLEVECTOR4(X * V.X, Y * V.Y, Z * V.Z, W * V.W); }
	FORCEINLINE SIMPLE_DOUBLEVECTOR4 operator/(CONST SIMPLE_DOUBLEVECTOR4 REFERENCE V) CONST { return SIMPLE_DOUBLEVECTOR4(X / V.X, Y / V.Y, Z / V.Z, W / V.W); }
	FORCEINLINE SIMPLE_DOUBLEVECTOR4 operator+(CONST double REFERENCE Bias) CONST { return SIMPLE_DOUBLEVECTOR4(X + Bias, Y + Bias, Z + Bias, W + Bias); }
	FORCEINLINE SIMPLE_DOUBLEVECTOR4 operator-(CONST double REFERENCE Bias) CONST { return SIMPLE_DOUBLEVECTOR4(X - Bias, Y - Bias, Z - Bias, W - Bias); }
	FORCEINLINE SIMPLE_DOUBLEVECTOR4 operator*(CONST double REFERENCE Scale) CONST { return SIMPLE_DOUBLEVECTOR4(X * Scale, Y * Scale, Z * Scale, W * Scale); }
	FORCEINLINE SIMPLE_DOUBLEVECTOR4 operator/(CONST double REFERENCE Scale) CONST { return SIMPLE_DOUBLEVECTOR4(X / Scale, Y / Scale, Z / Scale, W / Scale); }
	FORCEINLINE SIMPLE_DOUBLEVECTOR4 operator-() CONST { return SIMPLE_DOUBLEVECTOR4(-X, -Y, -Z, -W); }

	FORCEINLINE SIMPLE_DOUBLEVECTOR4 operator+=(CONST SIMPLE_DOUBLEVECTOR4 REFERENCE V) { return SIMPLE_DOUBLEVECTOR4(X += V.X, Y += V.Y, Z += V.Z, W += V.W); }
	FORCEINLINE SIMPLE_DOUBLEVECTOR4 operator-=(CONST SIMPLE_DOUBLEVECTOR4 REFERENCE V) { return SIMPLE_DOUBLEVECTOR4(X -= V.X, Y -= V.Y, Z -= V.Z, W -= V.W); }
	FORCEINLINE SIMPLE_DOUBLEVECTOR4 operator*=(CONST SIMPLE_DOUBLEVECTOR4 REFERENCE V) { return SIMPLE_DOUBLEVECTOR4(X *= V.X, Y *= V.Y, Z *= V.Z, W *= V.W); }
	FORCEINLINE SIMPLE_DOUBLEVECTOR4 operator/=(CONST SIMPLE_DOUBLEVECTOR4 REFERENCE V) { return SIMPLE_DOUBLEVECTOR4(X /= V.X, Y /= V.Y, Z /= V.Z, W /= V.W); }
	FORCEINLINE SIMPLE_DOUBLEVECTOR4 operator+=(CONST double REFERENCE Bias) { return SIMPLE_DOUBLEVECTOR4(X += Bias, Y += Bias, Z += Bias, W += Bias); }
	FORCEINLINE SIMPLE_DOUBLEVECTOR4 operator-=(CONST double REFERENCE Bias) { return SIMPLE_DOUBLEVECTOR4(X -= Bias, Y -= Bias, Z -= Bias, W -= Bias); }
	FORCEINLINE SIMPLE_DOUBLEVECTOR4 operator*=(CONST double REFERENCE Scale) { return SIMPLE_DOUBLEVECTOR4(X *= Scale, Y *= Scale, Z *= Scale, W *= Scale); }
	FORCEINLINE SIMPLE_DOUBLEVECTOR4 operator/=(CONST double REFERENCE Scale) { return SIMPLE_DOUBLEVECTOR4(X /= Scale, Y /= Scale, Z /= Scale, W /= Scale); }

	FORCEINLINE double& operator[](CONST unsigned char REFERENCE Index) { return Data[Index]; }

	FORCEINLINE double& GetMin() { return SimpleMath_Min4(X, Y, Z, W); }
	FORCEINLINE double& GetMax() { return SimpleMath_Max4(X, Y, Z, W); }
	FORCEINLINE double GetAbsMin() CONST { return SimpleMath_AbsMin4(X, Y, Z, W); }
	FORCEINLINE double GetAbsMax() CONST { return SimpleMath_AbsMax4(X, Y, Z, W); }

	FORCEINLINE double Length() CONST { return sqrt(X*X + Y*Y + Z*Z + W*W); }
	FORCEINLINE double LengthSquared() CONST { return X*X + Y*Y + Z*Z + W*W; }

	FORCEINLINE void Normalize(double Tolerance = DEFAULT_DOUBLE_TOLERANCE) {
		double Length = X*X + Y*Y + Z*Z + W*W;
		if(Length <= Tolerance) { X = 0.0; Y = 0.0; Z = 0.0; W = 0.0; return; }
		Length = sqrt(Length);
		X /= Length; Y /= Length; Z /= Length; W /= Length;
	}
	FORCEINLINE SIMPLE_DOUBLEVECTOR4 GetNormalized(double Tolerance = DEFAULT_DOUBLE_TOLERANCE) {
		double Length = X*X + Y*Y + Z*Z + W*W;
		if(Length <= Tolerance) return SIMPLE_DOUBLEVECTOR4();
		Length = sqrt(Length);
		return SIMPLE_DOUBLEVECTOR4(X / Length, Y / Length, Z / Length, W / Length);
	}

	#include "DoubleVector4.enum"
};

FORCEINLINE SIMPLE_DOUBLEVECTOR4 operator+(SIMPLE_DOUBLE_HOMOGENEOUS_COORDINATES_3D H, SIMPLE_DOUBLEVECTOR4 V) { H.NormalizeW(); V.Homog.NormalizeW(); return SIMPLE_DOUBLEVECTOR4(H.X + V.X, H.Y + V.Y, H.Z + V.Z, 1.0); }
FORCEINLINE SIMPLE_DOUBLEVECTOR4 operator-(SIMPLE_DOUBLE_HOMOGENEOUS_COORDINATES_3D H, SIMPLE_DOUBLEVECTOR4 V) { H.NormalizeW(); V.Homog.NormalizeW(); return SIMPLE_DOUBLEVECTOR4(H.X - V.X, H.Y - V.Y, H.Z - V.Z, 1.0); }
FORCEINLINE SIMPLE_DOUBLEVECTOR4 operator*(SIMPLE_DOUBLE_HOMOGENEOUS_COORDINATES_3D H, SIMPLE_DOUBLEVECTOR4 V) { H.NormalizeW(); V.Homog.NormalizeW(); return SIMPLE_DOUBLEVECTOR4(H.X * V.X, H.Y * V.Y, H.Z * V.Z, 1.0); }
FORCEINLINE SIMPLE_DOUBLEVECTOR4 operator/(SIMPLE_DOUBLE_HOMOGENEOUS_COORDINATES_3D H, SIMPLE_DOUBLEVECTOR4 V) { H.NormalizeW(); V.Homog.NormalizeW(); return SIMPLE_DOUBLEVECTOR4(H.X / V.X, H.Y / V.Y, H.Z / V.Z, 1.0); }
FORCEINLINE SIMPLE_DOUBLEVECTOR4 operator^(SIMPLE_DOUBLE_HOMOGENEOUS_COORDINATES_3D H, SIMPLE_DOUBLEVECTOR4 V) { H.NormalizeW(); V.Homog.NormalizeW(); return SIMPLE_DOUBLEVECTOR4(H.Y * V.Z - H.Z * V.Y, H.Z * V.X - H.X * V.Z, H.X * V.Y - H.Y * V.X); }
FORCEINLINE double operator%(SIMPLE_DOUBLE_HOMOGENEOUS_COORDINATES_3D H, SIMPLE_DOUBLEVECTOR4 V) { H.NormalizeW(); V.Homog.NormalizeW(); return H.X*V.X + H.Y*V.Y + H.Z*V.Z; }

FORCEINLINE SIMPLE_DOUBLEVECTOR4 operator+=(SIMPLE_DOUBLE_HOMOGENEOUS_COORDINATES_3D & H, SIMPLE_DOUBLEVECTOR4 V) { H.NormalizeW(); V.Homog.NormalizeW(); return SIMPLE_DOUBLEVECTOR4(H.X += V.X, H.Y += V.Y, H.Z += V.Z, 1.0); }
FORCEINLINE SIMPLE_DOUBLEVECTOR4 operator-=(SIMPLE_DOUBLE_HOMOGENEOUS_COORDINATES_3D & H, SIMPLE_DOUBLEVECTOR4 V) { H.NormalizeW(); V.Homog.NormalizeW(); return SIMPLE_DOUBLEVECTOR4(H.X -= V.X, H.Y -= V.Y, H.Z -= V.Z, 1.0); }
FORCEINLINE SIMPLE_DOUBLEVECTOR4 operator*=(SIMPLE_DOUBLE_HOMOGENEOUS_COORDINATES_3D & H, SIMPLE_DOUBLEVECTOR4 V) { H.NormalizeW(); V.Homog.NormalizeW(); return SIMPLE_DOUBLEVECTOR4(H.X *= V.X, H.Y *= V.Y, H.Z *= V.Z, 1.0); }
FORCEINLINE SIMPLE_DOUBLEVECTOR4 operator/=(SIMPLE_DOUBLE_HOMOGENEOUS_COORDINATES_3D & H, SIMPLE_DOUBLEVECTOR4 V) { H.NormalizeW(); V.Homog.NormalizeW(); return SIMPLE_DOUBLEVECTOR4(H.X /= V.X, H.Y /= V.Y, H.Z /= V.Z, 1.0); }

FORCEINLINE SIMPLE_DOUBLEVECTOR4 operator+(SIMPLE_DOUBLE_HOMOGENEOUS_COORDINATES_3D H, SIMPLE_DOUBLE_HOMOGENEOUS_COORDINATES_3D H2) { H.NormalizeW(); H2.NormalizeW(); return SIMPLE_DOUBLEVECTOR4(H.X + H2.X, H.Y + H2.Y, H.Z + H2.Z, 1.0); }
FORCEINLINE SIMPLE_DOUBLEVECTOR4 operator-(SIMPLE_DOUBLE_HOMOGENEOUS_COORDINATES_3D H, SIMPLE_DOUBLE_HOMOGENEOUS_COORDINATES_3D H2) { H.NormalizeW(); H2.NormalizeW(); return SIMPLE_DOUBLEVECTOR4(H.X - H2.X, H.Y - H2.Y, H.Z - H2.Z, 1.0); }
FORCEINLINE SIMPLE_DOUBLEVECTOR4 operator*(SIMPLE_DOUBLE_HOMOGENEOUS_COORDINATES_3D H, SIMPLE_DOUBLE_HOMOGENEOUS_COORDINATES_3D H2) { H.NormalizeW(); H2.NormalizeW(); return SIMPLE_DOUBLEVECTOR4(H.X * H2.X, H.Y * H2.Y, H.Z * H2.Z, 1.0); }
FORCEINLINE SIMPLE_DOUBLEVECTOR4 operator/(SIMPLE_DOUBLE_HOMOGENEOUS_COORDINATES_3D H, SIMPLE_DOUBLE_HOMOGENEOUS_COORDINATES_3D H2) { H.NormalizeW(); H2.NormalizeW(); return SIMPLE_DOUBLEVECTOR4(H.X / H2.X, H.Y / H2.Y, H.Z / H2.Z, 1.0); }
FORCEINLINE SIMPLE_DOUBLEVECTOR4 operator^(SIMPLE_DOUBLE_HOMOGENEOUS_COORDINATES_3D H, SIMPLE_DOUBLE_HOMOGENEOUS_COORDINATES_3D H2) { H.NormalizeW(); H2.NormalizeW(); return SIMPLE_DOUBLEVECTOR4(H.Y * H2.Z - H.Z * H2.Y, H.Z * H2.X - H.X * H2.Z, H.X * H2.Y - H.Y * H2.X); }
FORCEINLINE double operator%(SIMPLE_DOUBLE_HOMOGENEOUS_COORDINATES_3D H, SIMPLE_DOUBLE_HOMOGENEOUS_COORDINATES_3D H2) { H.NormalizeW(); H2.NormalizeW(); return H.X*H2.X + H.Y*H2.Y + H.Z*H2.Z; }

FORCEINLINE SIMPLE_DOUBLEVECTOR4 operator+=(SIMPLE_DOUBLE_HOMOGENEOUS_COORDINATES_3D & H, SIMPLE_DOUBLE_HOMOGENEOUS_COORDINATES_3D H2) { H.NormalizeW(); H2.NormalizeW(); return SIMPLE_DOUBLEVECTOR4(H.X += H2.X, H.Y += H2.Y, H.Z += H2.Z, 1.0); }
FORCEINLINE SIMPLE_DOUBLEVECTOR4 operator-=(SIMPLE_DOUBLE_HOMOGENEOUS_COORDINATES_3D & H, SIMPLE_DOUBLE_HOMOGENEOUS_COORDINATES_3D H2) { H.NormalizeW(); H2.NormalizeW(); return SIMPLE_DOUBLEVECTOR4(H.X -= H2.X, H.Y -= H2.Y, H.Z -= H2.Z, 1.0); }
FORCEINLINE SIMPLE_DOUBLEVECTOR4 operator*=(SIMPLE_DOUBLE_HOMOGENEOUS_COORDINATES_3D & H, SIMPLE_DOUBLE_HOMOGENEOUS_COORDINATES_3D H2) { H.NormalizeW(); H2.NormalizeW(); return SIMPLE_DOUBLEVECTOR4(H.X *= H2.X, H.Y *= H2.Y, H.Z *= H2.Z, 1.0); }
FORCEINLINE SIMPLE_DOUBLEVECTOR4 operator/=(SIMPLE_DOUBLE_HOMOGENEOUS_COORDINATES_3D & H, SIMPLE_DOUBLE_HOMOGENEOUS_COORDINATES_3D H2) { H.NormalizeW(); H2.NormalizeW(); return SIMPLE_DOUBLEVECTOR4(H.X /= H2.X, H.Y /= H2.Y, H.Z /= H2.Z, 1.0); }

FORCEINLINE SIMPLE_DOUBLEVECTOR4 operator+(SIMPLE_DOUBLEVECTOR4 V, SIMPLE_DOUBLE_HOMOGENEOUS_COORDINATES_3D H) { V.Homog.NormalizeW(); H.NormalizeW(); return SIMPLE_DOUBLEVECTOR4(V.X + H.X, V.Y + H.Y, V.Z + H.Z, 1.0); }
FORCEINLINE SIMPLE_DOUBLEVECTOR4 operator-(SIMPLE_DOUBLEVECTOR4 V, SIMPLE_DOUBLE_HOMOGENEOUS_COORDINATES_3D H) { V.Homog.NormalizeW(); H.NormalizeW(); return SIMPLE_DOUBLEVECTOR4(V.X - H.X, V.Y - H.Y, V.Z - H.Z, 1.0); }
FORCEINLINE SIMPLE_DOUBLEVECTOR4 operator*(SIMPLE_DOUBLEVECTOR4 V, SIMPLE_DOUBLE_HOMOGENEOUS_COORDINATES_3D H) { V.Homog.NormalizeW(); H.NormalizeW(); return SIMPLE_DOUBLEVECTOR4(V.X * H.X, V.Y * H.Y, V.Z * H.Z, 1.0); }
FORCEINLINE SIMPLE_DOUBLEVECTOR4 operator/(SIMPLE_DOUBLEVECTOR4 V, SIMPLE_DOUBLE_HOMOGENEOUS_COORDINATES_3D H) { V.Homog.NormalizeW(); H.NormalizeW(); return SIMPLE_DOUBLEVECTOR4(V.X / H.X, V.Y / H.Y, V.Z / H.Z, 1.0); }
FORCEINLINE SIMPLE_DOUBLEVECTOR4 operator^(SIMPLE_DOUBLEVECTOR4 V, SIMPLE_DOUBLE_HOMOGENEOUS_COORDINATES_3D H) { V.Homog.NormalizeW(); H.NormalizeW(); return SIMPLE_DOUBLEVECTOR4(V.Y * H.Z - V.Z * H.Y, V.Z * H.X - V.X * H.Z, V.X * H.Y - V.Y * H.X); }
FORCEINLINE double operator%(SIMPLE_DOUBLEVECTOR4 V, SIMPLE_DOUBLE_HOMOGENEOUS_COORDINATES_3D H) { V.Homog.NormalizeW(); H.NormalizeW(); return V.X*H.X + V.Y*H.Y + V.Z*H.Z; }

FORCEINLINE SIMPLE_DOUBLEVECTOR4 operator+=(SIMPLE_DOUBLEVECTOR4 & V, SIMPLE_DOUBLE_HOMOGENEOUS_COORDINATES_3D H) { V.Homog.NormalizeW(); H.NormalizeW(); return SIMPLE_DOUBLEVECTOR4(V.X += H.X, V.Y += H.Y, V.Z += H.Z, 1.0); }
FORCEINLINE SIMPLE_DOUBLEVECTOR4 operator-=(SIMPLE_DOUBLEVECTOR4 & V, SIMPLE_DOUBLE_HOMOGENEOUS_COORDINATES_3D H) { V.Homog.NormalizeW(); H.NormalizeW(); return SIMPLE_DOUBLEVECTOR4(V.X -= H.X, V.Y -= H.Y, V.Z -= H.Z, 1.0); }
FORCEINLINE SIMPLE_DOUBLEVECTOR4 operator*=(SIMPLE_DOUBLEVECTOR4 & V, SIMPLE_DOUBLE_HOMOGENEOUS_COORDINATES_3D H) { V.Homog.NormalizeW(); H.NormalizeW(); return SIMPLE_DOUBLEVECTOR4(V.X *= H.X, V.Y *= H.Y, V.Z *= H.Z, 1.0); }
FORCEINLINE SIMPLE_DOUBLEVECTOR4 operator/=(SIMPLE_DOUBLEVECTOR4 & V, SIMPLE_DOUBLE_HOMOGENEOUS_COORDINATES_3D H) { V.Homog.NormalizeW(); H.NormalizeW(); return SIMPLE_DOUBLEVECTOR4(V.X /= H.X, V.Y /= H.Y, V.Z /= H.Z, 1.0); }
